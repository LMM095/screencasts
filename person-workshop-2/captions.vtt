WEBVTT

1
00:00:00.030 --> 00:00:05.850
so we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to kick off by</font><font color="#E5E5E5"> having a</font>

2
00:00:02.700 --> 00:00:08.250
<font color="#E5E5E5">look at the problem so we're going to</font>

3
00:00:05.849 --> 00:00:09.718
build<font color="#E5E5E5"> a class which is describing a</font>

4
00:00:08.250 --> 00:00:11.550
person<font color="#CCCCCC"> and later on we're going to</font><font color="#E5E5E5"> put</font>

5
00:00:09.718 --> 00:00:14.910
that<font color="#E5E5E5"> in an address book</font><font color="#CCCCCC"> so if we have a</font>

6
00:00:11.550 --> 00:00:17.699
look at the CRC card<font color="#CCCCCC"> or rather the class</font>

7
00:00:14.910 --> 00:00:19.829
diagram card for this this<font color="#E5E5E5"> is kind of</font>

8
00:00:17.699 --> 00:00:21.330
what I've come<font color="#E5E5E5"> up</font><font color="#CCCCCC"> with okay as part of</font>

9
00:00:19.829 --> 00:00:24.179
<font color="#E5E5E5">my design process for</font><font color="#CCCCCC"> working this out</font>

10
00:00:21.329 --> 00:00:26.669
<font color="#E5E5E5">so we've got a person class and it's got</font>

11
00:00:24.179 --> 00:00:28.618
a bunch<font color="#E5E5E5"> of attributes</font><font color="#CCCCCC"> okay it's go first</font>

12
00:00:26.670 --> 00:00:29.640
name which is a string<font color="#CCCCCC"> certainly when</font>

13
00:00:28.618 --> 00:00:32.549
she's<font color="#E5E5E5"> destroying date of birth which is</font>

14
00:00:29.640 --> 00:00:35.009
<font color="#CCCCCC">fing emails which is an array and</font><font color="#E5E5E5"> then</font>

15
00:00:32.549 --> 00:00:37.409
phone numbers which is<font color="#CCCCCC"> an array and</font><font color="#E5E5E5"> then</font>

16
00:00:35.009 --> 00:00:39.390
we've got<font color="#E5E5E5"> a few methods here which we</font>

17
00:00:37.409 --> 00:00:41.729
want<font color="#E5E5E5"> to be able to call on instances of</font>

18
00:00:39.390 --> 00:00:44.340
this<font color="#CCCCCC"> there's full name which</font><font color="#E5E5E5"> should</font>

19
00:00:41.729 --> 00:00:46.619
return<font color="#E5E5E5"> a string</font><font color="#CCCCCC"> there's</font><font color="#E5E5E5"> an email</font><font color="#CCCCCC"> which</font>

20
00:00:44.340 --> 00:00:49.140
takes a string<font color="#E5E5E5"> which is email address</font>

21
00:00:46.619 --> 00:00:50.488
and adds it to<font color="#CCCCCC"> this emails array</font><font color="#E5E5E5"> and</font>

22
00:00:49.140 --> 00:00:52.289
then we've<font color="#E5E5E5"> got the same thing</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> add</font>

23
00:00:50.488 --> 00:00:53.909
phone and then we've got<font color="#E5E5E5"> this print</font>

24
00:00:52.289 --> 00:00:56.760
details method which we want<font color="#E5E5E5"> to return</font>

25
00:00:53.909 --> 00:00:58.769
<font color="#CCCCCC">undefined</font><font color="#E5E5E5"> but the workshop will show you</font>

26
00:00:56.759 --> 00:01:00.628
what<font color="#CCCCCC"> that should do under the hood</font><font color="#E5E5E5"> later</font>

27
00:00:58.770 --> 00:01:02.520
on and then down<font color="#CCCCCC"> the bottom I've got the</font>

28
00:01:00.628 --> 00:01:04.859
constructor which we want<font color="#E5E5E5"> to take in a</font>

29
00:01:02.520 --> 00:01:07.260
first name which is a string<font color="#E5E5E5"> a surname</font>

30
00:01:04.859 --> 00:01:09.569
which is a string and a date of<font color="#CCCCCC"> birth</font>

31
00:01:07.260 --> 00:01:12.150
<font color="#CCCCCC">which is also</font><font color="#E5E5E5"> string so the constructor</font>

32
00:01:09.569 --> 00:01:14.609
<font color="#E5E5E5">takes in three arguments all of which is</font>

33
00:01:12.150 --> 00:01:17.130
strings now this<font color="#E5E5E5"> isn't</font><font color="#CCCCCC"> quite all the</font>

34
00:01:14.609 --> 00:01:18.509
<font color="#CCCCCC">requirements because there is one</font>

35
00:01:17.129 --> 00:01:20.908
<font color="#CCCCCC">additional requirement which is that</font>

36
00:01:18.509 --> 00:01:23.879
when we pass stuff<font color="#E5E5E5"> into this constructor</font>

37
00:01:20.909 --> 00:01:26.609
if we don't capitalize the first letter

38
00:01:23.879 --> 00:01:28.739
of the<font color="#CCCCCC"> first name</font><font color="#E5E5E5"> we want that to</font><font color="#CCCCCC"> be</font>

39
00:01:26.609 --> 00:01:30.269
capitalized<font color="#CCCCCC"> when it's stored in this</font>

40
00:01:28.739 --> 00:01:31.530
first name attribute<font color="#E5E5E5"> here</font>

41
00:01:30.269 --> 00:01:33.658
so that's<font color="#CCCCCC"> like another requirement</font>

42
00:01:31.530 --> 00:01:35.368
<font color="#E5E5E5">that's like not not described on here</font>

43
00:01:33.659 --> 00:01:37.228
but this is like a<font color="#E5E5E5"> good starting point</font>

44
00:01:35.368 --> 00:01:39.688
<font color="#CCCCCC">for</font><font color="#E5E5E5"> working out how are we going to do</font>

45
00:01:37.228 --> 00:01:40.739
this and what I tend<font color="#E5E5E5"> to do when we've</font>

46
00:01:39.688 --> 00:01:43.139
got a<font color="#E5E5E5"> problem like this</font>

47
00:01:40.739 --> 00:01:44.759
is come up<font color="#E5E5E5"> with like a vague plan for</font>

48
00:01:43.140 --> 00:01:46.739
implementing this<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I often</font><font color="#E5E5E5"> just write</font>

49
00:01:44.759 --> 00:01:50.700
<font color="#E5E5E5">this in the readme</font><font color="#CCCCCC"> so I'm like what</font>

50
00:01:46.739 --> 00:01:53.039
stuff do we need to do here<font color="#CCCCCC"> so for me</font><font color="#E5E5E5"> we</font>

51
00:01:50.700 --> 00:01:56.609
want to start<font color="#E5E5E5"> off probably by just doing</font>

52
00:01:53.040 --> 00:01:58.049
<font color="#CCCCCC">the constructor so that's like basic</font>

53
00:01:56.609 --> 00:01:59.849
stuff we want to do the constructor<font color="#CCCCCC"> and</font>

54
00:01:58.049 --> 00:02:05.159
<font color="#E5E5E5">then we want to check</font><font color="#CCCCCC"> that it that</font><font color="#E5E5E5"> it</font>

55
00:01:59.849 --> 00:02:08.579
worked<font color="#CCCCCC"> and then because we're kind</font><font color="#E5E5E5"> of</font>

56
00:02:05.159 --> 00:02:09.989
dealing<font color="#CCCCCC"> with constructor II stuff maybe</font>

57
00:02:08.580 --> 00:02:12.500
<font color="#E5E5E5">we</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to look at capitalizing that</font>

58
00:02:09.989 --> 00:02:12.500
first name

59
00:02:12.719 --> 00:02:16.240
so that's that<font color="#E5E5E5"> other requirement which</font>

60
00:02:14.949 --> 00:02:17.319
we've worked<font color="#CCCCCC"> out right</font><font color="#E5E5E5"> we want to</font>

61
00:02:16.240 --> 00:02:21.340
capitalize the first<font color="#E5E5E5"> name when it's</font>

62
00:02:17.319 --> 00:02:23.620
passed into the<font color="#E5E5E5"> constructor</font><font color="#CCCCCC"> and then the</font>

63
00:02:21.340 --> 00:02:28.060
third<font color="#CCCCCC"> thing we want to do is implement</font>

64
00:02:23.620 --> 00:02:31.289
this<font color="#E5E5E5"> full name function so we'll worry</font>

65
00:02:28.060 --> 00:02:31.289
<font color="#CCCCCC">about how</font><font color="#E5E5E5"> to do that when we get to it</font>

66
00:02:32.460 --> 00:02:39.490
and then<font color="#E5E5E5"> finally</font><font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> implement</font>

67
00:02:36.550 --> 00:02:41.620
this<font color="#E5E5E5"> emails thing okay so we want to add</font>

68
00:02:39.490 --> 00:02:46.170
this emails attribute and<font color="#E5E5E5"> we also want</font>

69
00:02:41.620 --> 00:02:53.319
to add this add email method so emails

70
00:02:46.169 --> 00:02:54.579
and add email<font color="#E5E5E5"> cool</font><font color="#CCCCCC"> and the other</font><font color="#E5E5E5"> stuff</font>

71
00:02:53.319 --> 00:02:56.079
<font color="#CCCCCC">we'll leave for now we'll come back to</font>

72
00:02:54.580 --> 00:03:06.010
<font color="#CCCCCC">that and</font><font color="#E5E5E5"> add to our plan when we get a</font>

73
00:02:56.080 --> 00:03:08.590
<font color="#CCCCCC">little bit</font><font color="#E5E5E5"> further on so if we have a</font>

74
00:03:06.009 --> 00:03:10.929
look<font color="#E5E5E5"> at this first thing here right we</font>

75
00:03:08.590 --> 00:03:12.599
need to<font color="#CCCCCC"> implement a person class</font><font color="#E5E5E5"> and</font>

76
00:03:10.930 --> 00:03:17.140
then<font color="#E5E5E5"> we need to</font><font color="#CCCCCC"> implement a constructor</font>

77
00:03:12.599 --> 00:03:18.729
which is described on our card so we're

78
00:03:17.139 --> 00:03:20.919
going<font color="#E5E5E5"> to start off by</font><font color="#CCCCCC"> creating a test</font>

79
00:03:18.729 --> 00:03:22.030
for<font color="#E5E5E5"> that</font><font color="#CCCCCC"> because we're</font><font color="#E5E5E5"> doing TDD</font><font color="#CCCCCC"> so I'm</font>

80
00:03:20.919 --> 00:03:26.789
just gonna come<font color="#CCCCCC"> over here</font><font color="#E5E5E5"> and make</font><font color="#CCCCCC"> a new</font>

81
00:03:22.030 --> 00:03:30.639
file<font color="#CCCCCC"> called person dark</font><font color="#E5E5E5"> test dot</font>

82
00:03:26.789 --> 00:03:32.379
JavaScript<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is going to be our</font>

83
00:03:30.639 --> 00:03:33.609
test for the for the person class<font color="#CCCCCC"> it's</font>

84
00:03:32.379 --> 00:03:35.799
kind of usual when you're doing this

85
00:03:33.610 --> 00:03:37.900
stuff to name these files<font color="#E5E5E5"> after the</font>

86
00:03:35.800 --> 00:03:39.880
class that we're that we're<font color="#CCCCCC"> dealing with</font>

87
00:03:37.900 --> 00:03:41.709
so if<font color="#E5E5E5"> our test if I</font><font color="#CCCCCC"> class school person</font>

88
00:03:39.879 --> 00:03:43.539
the test should<font color="#E5E5E5"> be called person test</font>

89
00:03:41.709 --> 00:03:46.239
<font color="#CCCCCC">ojs</font><font color="#E5E5E5"> and the actual model with the class</font>

90
00:03:43.539 --> 00:03:48.370
should<font color="#E5E5E5"> be called person j/s and then in</font>

91
00:03:46.239 --> 00:03:53.530
here<font color="#CCCCCC"> we need to do some stuff we need</font><font color="#E5E5E5"> to</font>

92
00:03:48.370 --> 00:03:55.150
<font color="#E5E5E5">bring in chai and we need to kind of set</font>

93
00:03:53.530 --> 00:04:00.449
up<font color="#E5E5E5"> our person right so I'm going</font><font color="#CCCCCC"> to</font>

94
00:03:55.150 --> 00:04:00.450
start off by<font color="#E5E5E5"> just</font><font color="#CCCCCC"> bringing in China</font>

95
00:04:04.009 --> 00:04:08.489
and then I'm just<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to set up</font>

96
00:04:06.090 --> 00:04:10.519
<font color="#E5E5E5">another thing called expect this is what</font>

97
00:04:08.489 --> 00:04:12.718
we saw yesterday

98
00:04:10.519 --> 00:04:14.069
it just<font color="#E5E5E5"> means that we we'd have the</font>

99
00:04:12.718 --> 00:04:16.589
<font color="#CCCCCC">called chai don't expect</font><font color="#E5E5E5"> everywhere we</font>

100
00:04:14.068 --> 00:04:17.759
can<font color="#E5E5E5"> just go just</font><font color="#CCCCCC"> call expect</font><font color="#E5E5E5"> and then</font>

101
00:04:16.589 --> 00:04:18.839
we're going<font color="#CCCCCC"> to kind</font><font color="#E5E5E5"> of describe our</font>

102
00:04:17.759 --> 00:04:27.810
person<font color="#E5E5E5"> thing so we're going to get</font>

103
00:04:18.839 --> 00:04:29.549
described<font color="#CCCCCC"> lock I'm using es6 arrow</font>

104
00:04:27.810 --> 00:04:32.250
functions here just to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> it a bit</font>

105
00:04:29.550 --> 00:04:33.720
easier<font color="#E5E5E5"> so this is kind of where we're</font>

106
00:04:32.250 --> 00:04:34.769
<font color="#CCCCCC">going to describe</font><font color="#E5E5E5"> I want to work and</font>

107
00:04:33.720 --> 00:04:36.509
this<font color="#E5E5E5"> is the point at which we should</font>

108
00:04:34.769 --> 00:04:40.228
<font color="#E5E5E5">start</font><font color="#CCCCCC"> actually thinking about</font><font color="#E5E5E5"> like how</font>

109
00:04:36.509 --> 00:04:42.150
<font color="#CCCCCC">do we want to design</font><font color="#E5E5E5"> this thing so we</font>

110
00:04:40.228 --> 00:04:44.699
want a test for<font color="#CCCCCC"> this first bit over here</font>

111
00:04:42.149 --> 00:04:48.029
<font color="#E5E5E5">this constructor so we can write a test</font>

112
00:04:44.699 --> 00:04:57.900
<font color="#E5E5E5">for that saying something</font><font color="#CCCCCC"> like it should</font>

113
00:04:48.029 --> 00:04:59.098
<font color="#CCCCCC">initialize properly and then in here</font><font color="#E5E5E5"> we</font>

114
00:04:57.899 --> 00:05:01.500
<font color="#CCCCCC">need to</font><font color="#E5E5E5"> start</font><font color="#CCCCCC"> thinking like</font><font color="#E5E5E5"> how do you</font>

115
00:04:59.098 --> 00:05:03.719
<font color="#E5E5E5">want this to work and I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> for now I</font>

116
00:05:01.500 --> 00:05:06.750
want<font color="#E5E5E5"> to basically be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to create</font><font color="#CCCCCC"> a</font>

117
00:05:03.720 --> 00:05:10.770
new person<font color="#CCCCCC"> and we'll stick in a variable</font>

118
00:05:06.750 --> 00:05:12.720
<font color="#E5E5E5">called person and we know already that</font>

119
00:05:10.769 --> 00:05:15.448
we want it<font color="#E5E5E5"> to be able to take three</font>

120
00:05:12.720 --> 00:05:16.919
parameters<font color="#E5E5E5"> okay if we have</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> look at</font>

121
00:05:15.449 --> 00:05:19.169
<font color="#E5E5E5">this we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see it needs to take a first</font>

122
00:05:16.918 --> 00:05:23.008
name<font color="#E5E5E5"> a surname and a date of</font><font color="#CCCCCC"> birth all</font>

123
00:05:19.168 --> 00:05:24.719
of which are strings so we can kind<font color="#E5E5E5"> of</font>

124
00:05:23.009 --> 00:05:30.689
simulate that<font color="#E5E5E5"> so we just make</font><font color="#CCCCCC"> someone up</font>

125
00:05:24.720 --> 00:05:33.690
<font color="#E5E5E5">like Joe Bloggs and let's pass in I</font>

126
00:05:30.689 --> 00:05:36.750
don't<font color="#CCCCCC"> know first</font><font color="#E5E5E5"> of Jan 1990 as the</font><font color="#CCCCCC"> date</font>

127
00:05:33.689 --> 00:05:38.069
of<font color="#CCCCCC"> birth so that's kind of</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is how</font>

128
00:05:36.750 --> 00:05:39.990
we want<font color="#E5E5E5"> this bit to work should be</font>

129
00:05:38.069 --> 00:05:41.550
capital right<font color="#E5E5E5"> and then when you think</font>

130
00:05:39.990 --> 00:05:43.530
<font color="#CCCCCC">about like what</font><font color="#E5E5E5"> what stuff should it</font>

131
00:05:41.550 --> 00:05:46.710
return so if we've created this

132
00:05:43.529 --> 00:05:52.948
correctly<font color="#CCCCCC"> we</font><font color="#E5E5E5"> should be able to now say</font>

133
00:05:46.709 --> 00:05:55.829
person dot<font color="#CCCCCC"> first-name and</font><font color="#E5E5E5"> we should be</font>

134
00:05:52.949 --> 00:05:58.500
able<font color="#E5E5E5"> to get back like their first name</font>

135
00:05:55.829 --> 00:06:01.728
which is going<font color="#E5E5E5"> to be Joe in this case so</font>

136
00:05:58.500 --> 00:06:05.069
we<font color="#E5E5E5"> need to turn this into an expectation</font>

137
00:06:01.728 --> 00:06:12.848
<font color="#E5E5E5">so we can use choice syntax to say that</font>

138
00:06:05.069 --> 00:06:19.069
we expect<font color="#E5E5E5"> person dot</font><font color="#CCCCCC"> first-name to equal</font>

139
00:06:12.848 --> 00:06:20.240
Joe<font color="#CCCCCC"> so that kind of makes sense</font><font color="#E5E5E5"> right</font>

140
00:06:19.069 --> 00:06:21.620
we're setting up<font color="#E5E5E5"> this thing using</font>

141
00:06:20.240 --> 00:06:23.000
constructor<font color="#E5E5E5"> and then we expect to be</font>

142
00:06:21.620 --> 00:06:25.189
able<font color="#E5E5E5"> to look at the first name attribute</font>

143
00:06:23.000 --> 00:06:26.538
and<font color="#E5E5E5"> that'll be set to Joe and then we</font>

144
00:06:25.189 --> 00:06:30.399
expect<font color="#CCCCCC"> me out to do the same thing with</font>

145
00:06:26.538 --> 00:06:32.659
surname<font color="#E5E5E5"> but we expect that</font><font color="#CCCCCC"> to be blogs</font>

146
00:06:30.399 --> 00:06:36.469
and then we<font color="#E5E5E5"> expect me I'll do the same</font>

147
00:06:32.660 --> 00:06:42.919
<font color="#E5E5E5">thing with date of birth and we expect</font>

148
00:06:36.470 --> 00:06:44.240
<font color="#E5E5E5">that to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> first of June</font><font color="#CCCCCC"> 1990 and</font><font color="#E5E5E5"> that's</font>

149
00:06:42.918 --> 00:06:45.620
<font color="#E5E5E5">you'll probably do for now like that's</font>

150
00:06:44.240 --> 00:06:47.120
enough<font color="#E5E5E5"> that's enough</font><font color="#CCCCCC"> setup stuff</font><font color="#E5E5E5"> this</font>

151
00:06:45.620 --> 00:06:48.680
checks<font color="#E5E5E5"> the constructor works properly</font>

152
00:06:47.120 --> 00:06:50.149
<font color="#E5E5E5">and it checks that we can call these</font>

153
00:06:48.680 --> 00:06:52.490
attributes<font color="#E5E5E5"> and they've been set properly</font>

154
00:06:50.149 --> 00:06:58.728
<font color="#E5E5E5">by that constructor so if we run</font><font color="#CCCCCC"> that</font>

155
00:06:52.490 --> 00:07:00.620
test we get some failures which makes

156
00:06:58.728 --> 00:07:04.120
sense<font color="#E5E5E5"> person is not defined</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> need</font>

157
00:07:00.620 --> 00:07:06.379
to come up<font color="#E5E5E5"> here and define our person</font>

158
00:07:04.120 --> 00:07:07.519
we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> require this in from</font>

159
00:07:06.379 --> 00:07:11.658
another<font color="#E5E5E5"> file which</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> haven't created</font>

160
00:07:07.519 --> 00:07:15.560
yet so we want<font color="#E5E5E5"> to require this person in</font>

161
00:07:11.658 --> 00:07:19.848
from the models folder<font color="#E5E5E5"> and we want it to</font>

162
00:07:15.560 --> 00:07:23.569
be called person<font color="#CCCCCC"> dot J s and now if I</font>

163
00:07:19.848 --> 00:07:25.639
<font color="#E5E5E5">run these tests we'll get an error</font><font color="#CCCCCC"> and</font>

164
00:07:23.569 --> 00:07:29.089
it's a big ugly error but at the top it

165
00:07:25.639 --> 00:07:33.310
says<font color="#E5E5E5"> cannot find module</font><font color="#CCCCCC"> models</font><font color="#E5E5E5"> personage</font>

166
00:07:29.089 --> 00:07:33.310
<font color="#CCCCCC">is</font><font color="#E5E5E5"> oppression</font><font color="#CCCCCC"> dot yes let's fix that</font>

167
00:07:34.779 --> 00:07:37.779
cool

168
00:07:38.639 --> 00:07:42.180
and that's gonna<font color="#CCCCCC"> create the fire yet</font><font color="#E5E5E5"> so</font>

169
00:07:40.918 --> 00:07:44.459
it makes<font color="#CCCCCC"> sense that you can't find this</font>

170
00:07:42.180 --> 00:07:46.370
this person<font color="#E5E5E5"> is so if we head</font><font color="#CCCCCC"> over here</font>

171
00:07:44.459 --> 00:07:52.589
<font color="#E5E5E5">and we actually create a file in</font><font color="#CCCCCC"> here</font>

172
00:07:46.370 --> 00:07:55.769
called person is hope you won't run<font color="#E5E5E5"> the</font>

173
00:07:52.589 --> 00:07:57.568
<font color="#E5E5E5">test now it'll find the file but we'll</font>

174
00:07:55.769 --> 00:07:59.068
get<font color="#CCCCCC"> a</font><font color="#E5E5E5"> different error back saying person</font>

175
00:07:57.569 --> 00:08:05.039
is<font color="#E5E5E5"> not a constructor which makes sense</font>

176
00:07:59.069 --> 00:08:14.189
<font color="#E5E5E5">so we need to create that and then we</font>

177
00:08:05.038 --> 00:08:18.839
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> export it hopefully</font><font color="#CCCCCC"> we run the</font>

178
00:08:14.189 --> 00:08:20.400
<font color="#E5E5E5">test now we get another error assertion</font>

179
00:08:18.839 --> 00:08:22.019
<font color="#E5E5E5">error expected undefined to equal</font><font color="#CCCCCC"> Joe</font>

180
00:08:20.399 --> 00:08:23.698
and<font color="#E5E5E5"> that's because the the constructor</font>

181
00:08:22.019 --> 00:08:25.740
we<font color="#E5E5E5"> don't have a constructor yet so it</font>

182
00:08:23.699 --> 00:08:28.259
doesn't set things up properly<font color="#CCCCCC"> so we</font>

183
00:08:25.740 --> 00:08:32.549
need to make a constructor so we can do

184
00:08:28.259 --> 00:08:34.139
that with the<font color="#E5E5E5"> keyword constructor and we</font>

185
00:08:32.549 --> 00:08:36.000
know that<font color="#E5E5E5"> we want this to take three</font>

186
00:08:34.139 --> 00:08:42.049
things<font color="#CCCCCC"> okay it's going</font><font color="#E5E5E5"> to take a first</font>

187
00:08:36.000 --> 00:08:44.698
<font color="#E5E5E5">name</font><font color="#CCCCCC"> a surname and a date of birth</font><font color="#E5E5E5"> and</font>

188
00:08:42.049 --> 00:08:47.578
then what we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> do in here is we</font>

189
00:08:44.698 --> 00:08:49.708
want<font color="#E5E5E5"> to assign each</font><font color="#CCCCCC"> of these to a</font>

190
00:08:47.578 --> 00:08:52.109
property on the current<font color="#E5E5E5"> object and we</font>

191
00:08:49.708 --> 00:08:55.250
can<font color="#CCCCCC"> get the</font><font color="#E5E5E5"> current object with this so</font>

192
00:08:52.110 --> 00:09:00.240
if we say this dot<font color="#CCCCCC"> first-name equals</font>

193
00:08:55.250 --> 00:09:01.919
<font color="#CCCCCC">first-name and if we just to placate</font>

194
00:09:00.240 --> 00:09:07.159
<font color="#E5E5E5">that a couple of times and then do the</font>

195
00:09:01.919 --> 00:09:12.299
same<font color="#E5E5E5"> for surname and date of birth</font>

196
00:09:07.159 --> 00:09:13.500
hopefully if we run these tests well

197
00:09:12.299 --> 00:09:15.299
you've got an error<font color="#E5E5E5"> first name is not</font>

198
00:09:13.500 --> 00:09:18.480
defined called<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> a test catching a</font>

199
00:09:15.299 --> 00:09:25.139
an error in my<font color="#E5E5E5"> typing should be first</font>

200
00:09:18.480 --> 00:09:27.810
name with capital<font color="#CCCCCC"> n</font><font color="#E5E5E5"> and there we are</font>

201
00:09:25.139 --> 00:09:29.519
<font color="#E5E5E5">we've got a working test so that's like</font>

202
00:09:27.809 --> 00:09:31.649
that's<font color="#E5E5E5"> the</font><font color="#CCCCCC"> first bit</font><font color="#E5E5E5"> of our requirements</font>

203
00:09:29.519 --> 00:09:33.209
done right<font color="#E5E5E5"> we've written a test which</font>

204
00:09:31.649 --> 00:09:35.190
describes the constructor<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then</font>

205
00:09:33.208 --> 00:09:38.250
checks that<font color="#E5E5E5"> we can access the right</font>

206
00:09:35.190 --> 00:09:40.110
stuff so<font color="#CCCCCC"> the next thing that we need to</font>

207
00:09:38.250 --> 00:09:42.809
look at is capitalizing<font color="#CCCCCC"> the first name</font>

208
00:09:40.110 --> 00:09:46.199
from<font color="#CCCCCC"> that requirement</font><font color="#E5E5E5"> so what we want to</font>

209
00:09:42.809 --> 00:09:49.859
happen is that<font color="#CCCCCC"> if we pass in like a</font>

210
00:09:46.198 --> 00:09:51.990
lowercase letter<font color="#CCCCCC"> here we want it to</font>

211
00:09:49.860 --> 00:09:55.860
<font color="#E5E5E5">capitalize it when it assigns it</font>

212
00:09:51.990 --> 00:09:57.269
<font color="#E5E5E5">to this attribute inside the object</font><font color="#CCCCCC"> so I</font>

213
00:09:55.860 --> 00:09:58.860
feel like<font color="#CCCCCC"> we should write another test</font>

214
00:09:57.269 --> 00:10:02.699
for<font color="#CCCCCC"> this</font><font color="#E5E5E5"> okay so I'm just</font><font color="#CCCCCC"> going to copy</font>

215
00:09:58.860 --> 00:10:04.019
<font color="#E5E5E5">and paste this test down here and I'm</font>

216
00:10:02.700 --> 00:10:09.620
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> change</font><font color="#CCCCCC"> the name to say it</font>

217
00:10:04.019 --> 00:10:12.208
should capitalize the<font color="#E5E5E5"> first name and</font>

218
00:10:09.620 --> 00:10:13.429
then we want to<font color="#E5E5E5"> create a new person in</font>

219
00:10:12.208 --> 00:10:16.769
exactly the<font color="#CCCCCC"> same way as we did</font><font color="#E5E5E5"> before</font>

220
00:10:13.429 --> 00:10:19.439
but<font color="#E5E5E5"> this time we're going to not</font>

221
00:10:16.769 --> 00:10:23.370
<font color="#E5E5E5">capitalize the first name so we'll have</font>

222
00:10:19.440 --> 00:10:24.959
like<font color="#E5E5E5"> a mean</font><font color="#CCCCCC"> other and what</font><font color="#E5E5E5"> we expect to</font>

223
00:10:23.370 --> 00:10:26.669
come back<font color="#E5E5E5"> is that the first name has</font>

224
00:10:24.958 --> 00:10:27.929
been capitalized<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> don't care about</font>

225
00:10:26.669 --> 00:10:29.458
<font color="#E5E5E5">the</font><font color="#CCCCCC"> East we</font><font color="#E5E5E5"> don't care about testing</font>

226
00:10:27.929 --> 00:10:31.079
that the surname<font color="#E5E5E5"> any what's ur name or</font>

227
00:10:29.458 --> 00:10:33.539
anything about date of birth<font color="#E5E5E5"> we just</font>

228
00:10:31.080 --> 00:10:36.389
care about<font color="#E5E5E5"> this turning</font><font color="#CCCCCC"> Amy with a</font>

229
00:10:33.539 --> 00:10:39.028
lowercase a into Amy with an uppercase a

230
00:10:36.389 --> 00:10:41.009
when it's stored so this is like a

231
00:10:39.028 --> 00:10:45.539
<font color="#E5E5E5">really small</font><font color="#CCCCCC"> little test that tests this</font>

232
00:10:41.009 --> 00:10:49.289
<font color="#E5E5E5">particular bit of functionality and if</font>

233
00:10:45.539 --> 00:10:51.389
we run<font color="#E5E5E5"> the test now we get a failing</font>

234
00:10:49.289 --> 00:10:54.149
test<font color="#E5E5E5"> right we actually got back</font><font color="#CCCCCC"> Amy with</font>

235
00:10:51.389 --> 00:10:59.458
a<font color="#E5E5E5"> lower case and we wanted</font><font color="#CCCCCC"> to get</font><font color="#E5E5E5"> back</font>

236
00:10:54.149 --> 00:11:02.190
<font color="#CCCCCC">Amy with an upper case so how do we</font><font color="#E5E5E5"> deal</font>

237
00:10:59.458 --> 00:11:04.009
with this in our<font color="#E5E5E5"> implementation well we</font>

238
00:11:02.190 --> 00:11:08.760
know<font color="#CCCCCC"> that we want to do something</font><font color="#E5E5E5"> here</font>

239
00:11:04.009 --> 00:11:11.909
<font color="#E5E5E5">because we're getting in Amy with a</font>

240
00:11:08.759 --> 00:11:14.159
<font color="#CCCCCC">lowercase</font><font color="#E5E5E5"> a here in this first name and</font>

241
00:11:11.909 --> 00:11:16.860
then before<font color="#E5E5E5"> we assign it</font><font color="#CCCCCC"> to the property</font>

242
00:11:14.159 --> 00:11:18.719
to<font color="#E5E5E5"> the attribute of this object we want</font>

243
00:11:16.860 --> 00:11:22.639
<font color="#E5E5E5">to capitalize it so we want to do</font>

244
00:11:18.720 --> 00:11:25.350
<font color="#E5E5E5">something here like I know capitalized</font>

245
00:11:22.639 --> 00:11:27.000
<font color="#E5E5E5">we will do something like this right so</font>

246
00:11:25.350 --> 00:11:29.100
that it capitalizes that whatever that

247
00:11:27.000 --> 00:11:32.490
<font color="#E5E5E5">string is before it puts it in first</font>

248
00:11:29.100 --> 00:11:35.909
night<font color="#CCCCCC"> how do</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> capitalize stuff in</font>

249
00:11:32.490 --> 00:11:42.269
JavaScript well I had no<font color="#CCCCCC"> idea how did I</font>

250
00:11:35.909 --> 00:11:44.250
<font color="#E5E5E5">find that out</font><font color="#CCCCCC"> I googled it and it turns</font>

251
00:11:42.269 --> 00:11:48.629
out<font color="#E5E5E5"> that the easiest way</font><font color="#CCCCCC"> to do it which</font>

252
00:11:44.250 --> 00:11:49.980
is<font color="#E5E5E5"> not particularly easy</font><font color="#CCCCCC"> is like this so</font>

253
00:11:48.629 --> 00:11:51.629
<font color="#CCCCCC">all that's</font><font color="#E5E5E5"> happening here is</font><font color="#CCCCCC"> we're</font>

254
00:11:49.980 --> 00:11:53.430
<font color="#CCCCCC">taking</font><font color="#E5E5E5"> the first name we're getting the</font>

255
00:11:51.629 --> 00:11:56.039
<font color="#E5E5E5">first character from it and we're</font>

256
00:11:53.429 --> 00:11:58.229
turning<font color="#E5E5E5"> that to uppercase and then we're</font>

257
00:11:56.039 --> 00:12:00.599
<font color="#CCCCCC">adding</font><font color="#E5E5E5"> that string to the first name and</font>

258
00:11:58.230 --> 00:12:03.000
<font color="#E5E5E5">this slice thing basically chops off the</font>

259
00:12:00.600 --> 00:12:03.959
first character so like if<font color="#E5E5E5"> you want to</font>

260
00:12:03.000 --> 00:12:05.789
<font color="#E5E5E5">see how that works</font>

261
00:12:03.958 --> 00:12:07.279
I can jump into<font color="#E5E5E5"> a console</font>

262
00:12:05.789 --> 00:12:14.309
right and if we've<font color="#CCCCCC"> got a string like</font>

263
00:12:07.279 --> 00:12:16.439
<font color="#E5E5E5">Danny</font><font color="#CCCCCC"> and we call dot slice with a 1 it</font>

264
00:12:14.309 --> 00:12:21.089
<font color="#CCCCCC">will top</font><font color="#E5E5E5"> off the first letter and if we</font>

265
00:12:16.440 --> 00:12:22.650
call<font color="#CCCCCC"> char at 0 that'll get</font><font color="#E5E5E5"> the character</font>

266
00:12:21.090 --> 00:12:27.590
at the<font color="#CCCCCC"> 0 position which is just going</font><font color="#E5E5E5"> to</font>

267
00:12:22.649 --> 00:12:31.379
be a deep and so we can call on that<font color="#E5E5E5"> to</font>

268
00:12:27.590 --> 00:12:32.700
uppercase which capitalizes it and kind

269
00:12:31.379 --> 00:12:36.269
of<font color="#E5E5E5"> by joining these two things together</font>

270
00:12:32.700 --> 00:12:43.920
<font color="#E5E5E5">like</font><font color="#CCCCCC"> this bit</font><font color="#E5E5E5"> and this bit we get a</font>

271
00:12:36.269 --> 00:12:44.970
string with a capitalized<font color="#E5E5E5"> name so now</font>

272
00:12:43.919 --> 00:12:53.639
we've got that in let's check see<font color="#CCCCCC"> if</font>

273
00:12:44.970 --> 00:12:55.019
<font color="#CCCCCC">we've broken anything and we have them</font>

274
00:12:53.639 --> 00:12:56.480
so we<font color="#E5E5E5"> haven't broken the initialized</font>

275
00:12:55.019 --> 00:12:58.710
thing we haven't<font color="#CCCCCC"> broken that</font><font color="#E5E5E5"> first test</font>

276
00:12:56.480 --> 00:13:00.810
<font color="#E5E5E5">that's still working</font><font color="#CCCCCC"> and now we have</font>

277
00:12:58.710 --> 00:13:03.920
another test which is<font color="#E5E5E5"> checking for that</font>

278
00:13:00.809 --> 00:13:07.500
<font color="#E5E5E5">capitalization thing cool</font>

279
00:13:03.919 --> 00:13:09.679
so we've checked off these first two

280
00:13:07.500 --> 00:13:12.330
things<font color="#E5E5E5"> in here which is kind of cool</font>

281
00:13:09.679 --> 00:13:18.089
<font color="#E5E5E5">what we need to do now is look at this</font>

282
00:13:12.330 --> 00:13:21.620
full name method so what we want this to

283
00:13:18.090 --> 00:13:24.269
do<font color="#E5E5E5"> we want to be able to call a method</font>

284
00:13:21.620 --> 00:13:26.370
called<font color="#E5E5E5"> full name and have that</font><font color="#CCCCCC"> returned</font>

285
00:13:24.269 --> 00:13:29.490
<font color="#E5E5E5">like the full name</font><font color="#CCCCCC"> of the person so</font>

286
00:13:26.370 --> 00:13:33.000
either Joe Bloggs<font color="#CCCCCC"> or a mean other so we</font>

287
00:13:29.490 --> 00:13:41.190
should<font color="#E5E5E5"> write tests for</font><font color="#CCCCCC"> that it should</font>

288
00:13:33.000 --> 00:13:42.779
return a<font color="#CCCCCC"> four name and then we want to</font>

289
00:13:41.190 --> 00:13:44.990
<font color="#CCCCCC">create a person in the</font><font color="#E5E5E5"> same way as we</font>

290
00:13:42.779 --> 00:13:48.569
<font color="#E5E5E5">did before let's let's pick Joe Boggs</font>

291
00:13:44.990 --> 00:13:50.940
<font color="#E5E5E5">for now so we're just going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> create a</font>

292
00:13:48.570 --> 00:13:52.379
person object<font color="#CCCCCC"> for this test and then</font>

293
00:13:50.940 --> 00:13:54.480
what we<font color="#E5E5E5"> want to do is we want to check</font>

294
00:13:52.379 --> 00:13:58.610
we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> say we we basically want to</font>

295
00:13:54.480 --> 00:14:04.590
be able<font color="#E5E5E5"> to call</font><font color="#CCCCCC"> person</font><font color="#E5E5E5"> doc full name and</font>

296
00:13:58.610 --> 00:14:06.659
have that<font color="#CCCCCC"> returned like Joe Bloggs for</font>

297
00:14:04.590 --> 00:14:08.730
us so we<font color="#E5E5E5"> need to turn this into an</font>

298
00:14:06.659 --> 00:14:11.639
assertion<font color="#E5E5E5"> which we can do in</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> same</font>

299
00:14:08.730 --> 00:14:15.350
<font color="#E5E5E5">way we've come to expect from here so we</font>

300
00:14:11.639 --> 00:14:18.350
want to expect person dot full name to

301
00:14:15.350 --> 00:14:18.350
equal

302
00:14:20.220 --> 00:14:29.410
this string here<font color="#CCCCCC"> so what do</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> think is</font>

303
00:14:25.240 --> 00:14:32.080
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to happen if</font><font color="#E5E5E5"> we run this think</font>

304
00:14:29.409 --> 00:14:35.679
<font color="#E5E5E5">about for a second what person dot for</font>

305
00:14:32.080 --> 00:14:39.370
<font color="#CCCCCC">name going</font><font color="#E5E5E5"> to return at the moment is it</font>

306
00:14:35.679 --> 00:14:45.429
going to return<font color="#E5E5E5"> anything let's have a</font>

307
00:14:39.370 --> 00:14:47.080
look so<font color="#CCCCCC"> we've got pretty</font><font color="#E5E5E5"> sensible error</font>

308
00:14:45.429 --> 00:14:49.000
<font color="#E5E5E5">right person dot full name is not</font>

309
00:14:47.080 --> 00:14:51.850
function which is not because<font color="#E5E5E5"> we haven't</font>

310
00:14:49.000 --> 00:14:55.120
defined<font color="#E5E5E5"> it if we come over to our person</font>

311
00:14:51.850 --> 00:15:01.240
<font color="#E5E5E5">to s there's no full name function so to</font>

312
00:14:55.120 --> 00:15:03.310
fix<font color="#E5E5E5"> this we</font><font color="#CCCCCC"> need to define it and what</font>

313
00:15:01.240 --> 00:15:05.680
we want this to do we want it to return

314
00:15:03.309 --> 00:15:08.619
the first name plus<font color="#CCCCCC"> the</font><font color="#E5E5E5"> space plus the</font>

315
00:15:05.679 --> 00:15:13.809
second name<font color="#E5E5E5"> so we could try doing</font><font color="#CCCCCC"> ok</font>

316
00:15:08.620 --> 00:15:17.759
<font color="#E5E5E5">first this dot first name which will</font>

317
00:15:13.809 --> 00:15:25.079
gets the<font color="#E5E5E5"> first name plus a space plus</font>

318
00:15:17.759 --> 00:15:25.080
this dot surname let's see if this works

319
00:15:28.169 --> 00:15:31.169
cool

320
00:15:31.490 --> 00:15:36.049
expected<font color="#CCCCCC"> undefined to equal Joe Bloggs</font>

321
00:15:34.149 --> 00:15:38.269
so you're probably shouting at me now

322
00:15:36.049 --> 00:15:39.349
like what was what's going on here<font color="#E5E5E5"> is</font>

323
00:15:38.269 --> 00:15:41.000
<font color="#E5E5E5">because we haven't</font><font color="#CCCCCC"> actually returned</font>

324
00:15:39.350 --> 00:15:44.629
anything<font color="#E5E5E5"> from this function</font><font color="#CCCCCC"> so we need</font>

325
00:15:41.000 --> 00:15:49.429
to put return<font color="#E5E5E5"> in here and now if we try</font>

326
00:15:44.629 --> 00:15:54.919
running the tests we've got a green test

327
00:15:49.429 --> 00:15:58.338
<font color="#E5E5E5">awesome so looks like we're good for</font>

328
00:15:54.919 --> 00:16:02.389
this<font color="#CCCCCC"> we've ticked off another bit of</font>

329
00:15:58.339 --> 00:16:05.149
what we need<font color="#E5E5E5"> to do so the last thing</font><font color="#CCCCCC"> we</font>

330
00:16:02.389 --> 00:16:08.240
need<font color="#CCCCCC"> to do is deal with</font><font color="#E5E5E5"> this emails</font>

331
00:16:05.149 --> 00:16:13.070
thing<font color="#CCCCCC"> so what we want</font><font color="#E5E5E5"> to be able to do</font>

332
00:16:08.240 --> 00:16:14.839
we want to be able<font color="#E5E5E5"> to call person emails</font>

333
00:16:13.070 --> 00:16:16.160
<font color="#E5E5E5">and get back an</font><font color="#CCCCCC"> array of all of their</font>

334
00:16:14.839 --> 00:16:18.440
<font color="#E5E5E5">different email addresses because people</font>

335
00:16:16.159 --> 00:16:20.329
can have<font color="#CCCCCC"> more</font><font color="#E5E5E5"> than one email address and</font>

336
00:16:18.440 --> 00:16:23.450
in order to<font color="#E5E5E5"> add emails</font><font color="#CCCCCC"> we want to</font>

337
00:16:20.330 --> 00:16:25.879
<font color="#CCCCCC">implement a method called add email</font>

338
00:16:23.450 --> 00:16:29.560
which takes a<font color="#CCCCCC"> string and we want that</font><font color="#E5E5E5"> to</font>

339
00:16:25.879 --> 00:16:32.750
add the email<font color="#CCCCCC"> to to the array of emails</font>

340
00:16:29.559 --> 00:16:35.299
<font color="#E5E5E5">so the first thing we probably want to</font>

341
00:16:32.750 --> 00:16:39.589
do is come and<font color="#E5E5E5"> set</font><font color="#CCCCCC"> up that emails</font>

342
00:16:35.299 --> 00:16:41.059
<font color="#E5E5E5">attribute so I'm just going to come up</font>

343
00:16:39.589 --> 00:16:43.220
<font color="#E5E5E5">to this initialize test that we've</font>

344
00:16:41.059 --> 00:16:46.609
already written<font color="#E5E5E5"> and I want to check that</font>

345
00:16:43.220 --> 00:16:48.740
<font color="#CCCCCC">when we create a</font><font color="#E5E5E5"> new person by default</font>

346
00:16:46.610 --> 00:16:50.419
we can<font color="#CCCCCC"> call</font><font color="#E5E5E5"> person dot emails and it</font>

347
00:16:48.740 --> 00:16:53.269
will give us<font color="#E5E5E5"> an</font><font color="#CCCCCC"> empty array</font><font color="#E5E5E5"> because they</font>

348
00:16:50.419 --> 00:16:55.659
don't have<font color="#E5E5E5"> any emails yet so we can do</font>

349
00:16:53.269 --> 00:17:05.459
<font color="#E5E5E5">that with</font><font color="#CCCCCC"> another expectation expect</font>

350
00:16:55.659 --> 00:17:10.720
person dot emails<font color="#CCCCCC"> 2deep equal</font>

351
00:17:05.459 --> 00:17:13.360
and empty right I'm using deep here

352
00:17:10.720 --> 00:17:15.519
because we're comparing<font color="#CCCCCC"> arrays</font><font color="#E5E5E5"> and we</font>

353
00:17:13.359 --> 00:17:21.490
kind of<font color="#CCCCCC"> just need</font><font color="#E5E5E5"> to do that so if I run</font>

354
00:17:15.519 --> 00:17:24.338
these now we'll get<font color="#CCCCCC"> a failure</font><font color="#E5E5E5"> because we</font>

355
00:17:21.490 --> 00:17:26.470
expected<font color="#E5E5E5"> this array and actually calling</font>

356
00:17:24.338 --> 00:17:28.269
emails<font color="#E5E5E5"> returns undefined because we</font>

357
00:17:26.470 --> 00:17:29.950
haven't<font color="#E5E5E5"> got a property for that so we</font>

358
00:17:28.269 --> 00:17:34.058
want<font color="#CCCCCC"> to fix that</font><font color="#E5E5E5"> head over</font><font color="#CCCCCC"> to here</font><font color="#E5E5E5"> and</font>

359
00:17:29.950 --> 00:17:35.529
<font color="#E5E5E5">set</font><font color="#CCCCCC"> up this stock</font><font color="#E5E5E5"> emails</font><font color="#CCCCCC"> but because</font>

360
00:17:34.058 --> 00:17:36.730
we're not passing<font color="#E5E5E5"> anything in from the</font>

361
00:17:35.529 --> 00:17:38.168
constructor here<font color="#CCCCCC"> we actually just</font><font color="#E5E5E5"> want</font>

362
00:17:36.730 --> 00:17:40.210
to always set this to an empty<font color="#E5E5E5"> array</font>

363
00:17:38.169 --> 00:17:42.850
that we can put our emails in later on

364
00:17:40.210 --> 00:17:44.558
so we can just set this to a plain empty

365
00:17:42.849 --> 00:17:46.480
<font color="#CCCCCC">array and that's</font><font color="#E5E5E5"> going to mean whenever</font>

366
00:17:44.558 --> 00:17:47.710
we create<font color="#CCCCCC"> a new person it's going to</font><font color="#E5E5E5"> get</font>

367
00:17:46.480 --> 00:17:49.480
the first<font color="#E5E5E5"> name surname and date of birth</font>

368
00:17:47.710 --> 00:17:53.019
<font color="#E5E5E5">from</font><font color="#CCCCCC"> the stuff we passed into the</font>

369
00:17:49.480 --> 00:17:56.069
constructor but the emails is just

370
00:17:53.019 --> 00:18:01.359
always going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be set as an empty</font><font color="#CCCCCC"> array</font>

371
00:17:56.069 --> 00:18:05.079
hopefully if we run the tests we get a

372
00:18:01.359 --> 00:18:06.969
green<font color="#E5E5E5"> test again</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is kind of</font>

373
00:18:05.079 --> 00:18:08.678
worth thinking about<font color="#E5E5E5"> here that just</font>

374
00:18:06.970 --> 00:18:10.000
because we've<font color="#E5E5E5"> written</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> test doesn't</font>

375
00:18:08.679 --> 00:18:11.380
<font color="#CCCCCC">mean that we</font><font color="#E5E5E5"> shouldn't go back</font><font color="#CCCCCC"> later</font><font color="#E5E5E5"> as</font>

376
00:18:10.000 --> 00:18:12.849
we get more requirements and start

377
00:18:11.380 --> 00:18:15.010
adding<font color="#E5E5E5"> more stuff to our classes and</font>

378
00:18:12.849 --> 00:18:16.659
change that test that<font color="#CCCCCC"> we've already</font>

379
00:18:15.009 --> 00:18:18.548
written<font color="#CCCCCC"> it's totally fine to do that</font>

380
00:18:16.660 --> 00:18:22.900
that's<font color="#E5E5E5"> just a part of the process</font><font color="#CCCCCC"> of</font>

381
00:18:18.548 --> 00:18:24.039
building out software so the last thing

382
00:18:22.900 --> 00:18:26.080
<font color="#CCCCCC">that we're looking</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> then we've</font><font color="#E5E5E5"> kind of</font>

383
00:18:24.039 --> 00:18:28.480
done this bit this<font color="#E5E5E5"> emails a tribute but</font>

384
00:18:26.079 --> 00:18:31.509
we want to have this add emails<font color="#E5E5E5"> method</font>

385
00:18:28.480 --> 00:18:35.259
and that needs to<font color="#CCCCCC"> take a string and it</font>

386
00:18:31.509 --> 00:18:37.480
needs<font color="#CCCCCC"> to then add that string to to the</font>

387
00:18:35.259 --> 00:18:43.558
emails<font color="#CCCCCC"> all right so we need to</font><font color="#E5E5E5"> write a</font>

388
00:18:37.480 --> 00:18:50.759
test<font color="#CCCCCC"> for</font><font color="#E5E5E5"> that so we can say it should</font>

389
00:18:43.558 --> 00:18:50.759
<font color="#CCCCCC">accept new emails and</font><font color="#E5E5E5"> then</font><font color="#CCCCCC"> right</font>

390
00:18:53.930 --> 00:19:00.150
and then inside<font color="#E5E5E5"> here we've got to create</font>

391
00:18:56.369 --> 00:19:01.679
<font color="#E5E5E5">a new person just</font><font color="#CCCCCC"> like we did before and</font>

392
00:19:00.150 --> 00:19:04.050
now we need to<font color="#CCCCCC"> kind of design how do you</font>

393
00:19:01.680 --> 00:19:09.720
want this to work<font color="#E5E5E5"> right so we want</font><font color="#CCCCCC"> to be</font>

394
00:19:04.049 --> 00:19:11.069
able<font color="#E5E5E5"> to call</font><font color="#CCCCCC"> person dot add email and we</font>

395
00:19:09.720 --> 00:19:13.380
want to be able<font color="#E5E5E5"> to pass in a string to</font>

396
00:19:11.069 --> 00:19:18.210
this so let's<font color="#CCCCCC"> just</font><font color="#E5E5E5"> pick some emails for</font>

397
00:19:13.380 --> 00:19:20.880
<font color="#E5E5E5">Joe Bloggs here maybe Joe example.com</font>

398
00:19:18.210 --> 00:19:24.269
<font color="#CCCCCC">and then just to be doubly</font><font color="#E5E5E5"> sure this</font>

399
00:19:20.880 --> 00:19:25.950
like works with multiple<font color="#E5E5E5"> emails I'm just</font>

400
00:19:24.269 --> 00:19:31.379
going to<font color="#E5E5E5"> add a second email</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> maybe</font>

401
00:19:25.950 --> 00:19:34.019
like Joe<font color="#E5E5E5"> dot blogs like</font><font color="#CCCCCC"> work example.com</font>

402
00:19:31.380 --> 00:19:36.330
<font color="#E5E5E5">and then what we want to do is we want</font>

403
00:19:34.019 --> 00:19:38.670
to have<font color="#E5E5E5"> an assertion here which checks</font>

404
00:19:36.329 --> 00:19:41.549
that<font color="#E5E5E5"> having done</font><font color="#CCCCCC"> this and run this add</font>

405
00:19:38.670 --> 00:19:46.410
email method a couple of times when we

406
00:19:41.549 --> 00:19:50.490
call person dot emails we get back an

407
00:19:46.410 --> 00:19:56.279
array which has<font color="#E5E5E5"> got these two these two</font>

408
00:19:50.490 --> 00:19:59.430
emails in it so<font color="#E5E5E5"> we want to get back an</font>

409
00:19:56.279 --> 00:20:01.980
<font color="#E5E5E5">array that</font><font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of looks like this yeah</font>

410
00:19:59.430 --> 00:20:04.250
<font color="#E5E5E5">so we need to just wrap it up in an</font>

411
00:20:01.980 --> 00:20:04.250
assertion

412
00:20:15.289 --> 00:20:18.589
so we're<font color="#CCCCCC"> just</font><font color="#E5E5E5"> saying we expect when</font><font color="#CCCCCC"> we</font>

413
00:20:17.119 --> 00:20:21.500
call<font color="#CCCCCC"> persons or emails now that we've</font>

414
00:20:18.589 --> 00:20:26.869
done this stuff to be deeply equal to

415
00:20:21.500 --> 00:20:32.690
<font color="#E5E5E5">this array here okay</font><font color="#CCCCCC"> so let's try</font>

416
00:20:26.869 --> 00:20:34.549
<font color="#CCCCCC">running</font><font color="#E5E5E5"> that and we get a failure person</font>

417
00:20:32.690 --> 00:20:36.680
<font color="#CCCCCC">don't add email is not a function which</font>

418
00:20:34.549 --> 00:20:45.740
<font color="#E5E5E5">is what we expect so let's go</font><font color="#CCCCCC"> ahead and</font>

419
00:20:36.680 --> 00:20:50.060
add that<font color="#E5E5E5"> so there's the function</font><font color="#CCCCCC"> that'll</font>

420
00:20:45.740 --> 00:20:53.089
get<font color="#CCCCCC"> rid of this problem for us and</font><font color="#E5E5E5"> now</font>

421
00:20:50.059 --> 00:20:55.039
<font color="#CCCCCC">we</font><font color="#E5E5E5"> got a new</font><font color="#CCCCCC"> problem which is that we're</font>

422
00:20:53.089 --> 00:20:56.959
getting back<font color="#E5E5E5"> an empty array rather than</font>

423
00:20:55.039 --> 00:20:58.700
the array we expected which was having

424
00:20:56.960 --> 00:20:59.720
these two emails in it<font color="#E5E5E5"> and that's</font>

425
00:20:58.700 --> 00:21:02.269
<font color="#E5E5E5">because we haven't really done much in</font>

426
00:20:59.720 --> 00:21:05.509
in here at all<font color="#E5E5E5"> so we need to change this</font>

427
00:21:02.269 --> 00:21:08.450
<font color="#E5E5E5">so that</font><font color="#CCCCCC"> we actually</font><font color="#E5E5E5"> add whatever email</font>

428
00:21:05.509 --> 00:21:10.339
is passed in here so whatever<font color="#E5E5E5"> gets</font>

429
00:21:08.450 --> 00:21:13.190
passed in we<font color="#E5E5E5"> need to add it into this</font>

430
00:21:10.339 --> 00:21:20.569
array here so how do<font color="#E5E5E5"> we add stuff to</font><font color="#CCCCCC"> an</font>

431
00:21:13.190 --> 00:21:22.519
array we<font color="#CCCCCC"> can do</font><font color="#E5E5E5"> that with push and we</font>

432
00:21:20.569 --> 00:21:25.429
need to put in the<font color="#CCCCCC"> email that's</font><font color="#E5E5E5"> been</font>

433
00:21:22.519 --> 00:21:27.079
<font color="#E5E5E5">passed in so when this runs what it's</font>

434
00:21:25.430 --> 00:21:28.970
going to do is take<font color="#E5E5E5"> an email in here</font><font color="#CCCCCC"> and</font>

435
00:21:27.079 --> 00:21:31.309
it's then going to push that email into

436
00:21:28.970 --> 00:21:33.140
the array okay because<font color="#E5E5E5"> this</font><font color="#CCCCCC"> thought</font>

437
00:21:31.309 --> 00:21:35.539
email is<font color="#E5E5E5"> going to return that</font><font color="#CCCCCC"> emails</font>

438
00:21:33.140 --> 00:21:41.980
<font color="#E5E5E5">array and hopefully when we run the</font><font color="#CCCCCC"> test</font>

439
00:21:35.539 --> 00:21:41.980
<font color="#E5E5E5">now we've got green tests</font>

440
00:21:44.190 --> 00:21:48.059
so the last<font color="#E5E5E5"> thing that we might want</font><font color="#CCCCCC"> to</font>

441
00:21:46.170 --> 00:21:51.660
do here is<font color="#CCCCCC"> go and look to do a bit of</font>

442
00:21:48.059 --> 00:21:52.700
refactoring looking at this<font color="#E5E5E5"> I kind of</font>

443
00:21:51.660 --> 00:21:55.470
don't think<font color="#E5E5E5"> there's any obvious</font>

444
00:21:52.700 --> 00:21:57.569
refactoring that<font color="#CCCCCC"> we need to do maybe we</font>

445
00:21:55.470 --> 00:21:59.700
want<font color="#E5E5E5"> to pull this thing out into into a</font>

446
00:21:57.569 --> 00:22:02.159
function<font color="#CCCCCC"> or something</font><font color="#E5E5E5"> but I think</font><font color="#CCCCCC"> for me</font>

447
00:21:59.700 --> 00:22:04.410
this<font color="#E5E5E5"> isn't too complicated</font><font color="#CCCCCC"> so this is</font>

448
00:22:02.160 --> 00:22:05.460
probably<font color="#E5E5E5"> cool as it is there's a little</font>

449
00:22:04.410 --> 00:22:07.620
<font color="#E5E5E5">bit of refactoring</font><font color="#CCCCCC"> we could do with a</font>

450
00:22:05.460 --> 00:22:09.200
<font color="#E5E5E5">test</font><font color="#CCCCCC"> but we're</font><font color="#E5E5E5"> not really that yet we're</font>

451
00:22:07.619 --> 00:22:11.250
going<font color="#CCCCCC"> to save that</font><font color="#E5E5E5"> for some</font><font color="#CCCCCC"> other time</font>

452
00:22:09.200 --> 00:22:13.140
<font color="#E5E5E5">one of</font><font color="#CCCCCC"> the things I want to highlight</font>

453
00:22:11.250 --> 00:22:17.130
though look how much code we've got in

454
00:22:13.140 --> 00:22:19.140
our person class<font color="#E5E5E5"> like 18 lines it's not</font>

455
00:22:17.130 --> 00:22:22.830
<font color="#CCCCCC">loads</font><font color="#E5E5E5"> and then look how much code we've</font>

456
00:22:19.140 --> 00:22:25.759
got in our tests like<font color="#E5E5E5"> 40 lines and this</font>

457
00:22:22.829 --> 00:22:28.139
is<font color="#CCCCCC"> quite normal right to end up with a</font>

458
00:22:25.759 --> 00:22:31.589
lot<font color="#CCCCCC"> more test code</font><font color="#E5E5E5"> than you have</font>

459
00:22:28.140 --> 00:22:33.720
production<font color="#E5E5E5"> code because the tests are</font>

460
00:22:31.589 --> 00:22:35.609
<font color="#E5E5E5">necessarily more verbose they've got a</font>

461
00:22:33.720 --> 00:22:36.990
whole bunch<font color="#CCCCCC"> of</font><font color="#E5E5E5"> real life details in them</font>

462
00:22:35.609 --> 00:22:40.439
and there<font color="#E5E5E5"> is some stuff we can do to</font>

463
00:22:36.990 --> 00:22:41.849
tidy this up<font color="#CCCCCC"> but like</font><font color="#E5E5E5"> if you find</font>

464
00:22:40.440 --> 00:22:44.279
<font color="#E5E5E5">yourself</font><font color="#CCCCCC"> feeling like you're writing on</font>

465
00:22:41.849 --> 00:22:45.480
a lot<font color="#CCCCCC"> of tests or a lot</font><font color="#E5E5E5"> of test code</font>

466
00:22:44.279 --> 00:22:47.069
<font color="#CCCCCC">compared</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> amount of</font><font color="#E5E5E5"> production</font>

467
00:22:45.480 --> 00:22:49.740
code you're writing<font color="#E5E5E5"> that's fine because</font>

468
00:22:47.069 --> 00:22:55.220
<font color="#E5E5E5">writing unit</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> is part of writing</font>

469
00:22:49.740 --> 00:22:55.220
<font color="#CCCCCC">good code</font><font color="#E5E5E5"> in general cool</font>

